#include "Shooter.h"
#include "..\Robot.h"
#include "../Commands/ShooterDefaultCommand.h"
Shooter::Shooter() : Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	elevationJag = RobotMap::shooterElevationJag;
	frontJag = RobotMap::shooterFrontJag;
	backJag = RobotMap::shooterBackJag;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	isShooterMotorOn = false;
	
	frontJag->ChangeControlMode(CANJaguar::kSpeed);
	frontJag->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
	frontJag->ConfigEncoderCodesPerRev(360);	//maybe 360
	frontJag->EnableControl();
	
	backJag->ChangeControlMode(CANJaguar::kSpeed);
	backJag->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
	backJag->ConfigEncoderCodesPerRev(360);	//maybe 360
	backJag->EnableControl();
			
	double libraP = 0.4, libraI = 0.003, libraD = 0.0;
	SetPID(libraP, libraI, libraD);
}
void Shooter::InitDefaultCommand() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Shooter::ShooterOnOff(bool on){
	
	isShooterMotorOn = on;
	if(on){
		printf("Front Jag:\t%d", speed);
		printf("Back Jag:\t%d", GetBackSetSpeed());
		frontJag->Set(speed);
		backJag->Set(GetBackSetSpeed());
	}
	else {
		frontJag->Set(SHOOTER_OFF);
		backJag->Set(SHOOTER_OFF);
		isShooterMotorOn = false;
	}
}
bool Shooter::IsShooterMotorOn() {return isShooterMotorOn;}
int Shooter::GetFrontSetSpeed() {return speed;}
int Shooter::GetBackSetSpeed(){
	if(rawBackSpeedEnabled) return (int) rawBackSpeed;
	//TODO: Update with better math. 
	int math = 0;
	return speed - math;
}
int Shooter::GetElevationAngle() {return elevationAngle;}
int Shooter::GetDefaultSpeed() {return defaultSpeed;}
int Shooter::GetDefaultElevationAngle() {return defaultElevationAngle;}
void Shooter::SetToDefaults(){
	IncrementSpeed(defaultSpeed - speed);
	elevationAngle = defaultElevationAngle;
}
void Shooter::UpdateDefaults(double distanceToTarget, double robotAngleToTarget){
	//TODO: Takes Arguements and sets the speed and elevationAngle arguments
}
void Shooter::IncrementSpeed(int speedIncrement){
	speed += speedIncrement;
	if(isShooterMotorOn) ShooterOnOff(true);
	Robot::allignmentData->SendCurrentSpeed(speed);
}
void Shooter::IncrementAngle(int angleIncrement){
	printf ("IncrementAngle changing by %d\n", angleIncrement);
	elevationAngle += angleIncrement;
	TurnToSetAngle();
	Robot::allignmentData->SendCurrentAngle(elevationAngle);
}
//Figured this might be useful if we want to quickly put the speed to a certain preset
void Shooter::SetRawSpeed(int speed) {
	if(speed < 0 ) return;
	IncrementSpeed(speed - this->speed);
}
void Shooter::SetRawBackSpeed(int speed){
	rawBackSpeed = speed;
	rawBackSpeedEnabled = true;
}
void Shooter::SetRawElevationAngle(int elevationAngle) {
	this->elevationAngle = elevationAngle;
	Robot::allignmentData->SendCurrentAngle(elevationAngle);
}
bool Shooter::IsAtSetAngle(){
	if (elevationAngle == GetCurrentAngle()){
		return true;
	}
	return false;
}
#warning "Whoever's area of expertise this is may want to look at the below method"
float Shooter::GetCurrentAngle(){
	float angle = shooterElevationEncoder->GetVoltage();
	printf ("Shooter::GetCurrentAngle angle is %f\n", angle);
	return angle;
}
//TODO: Update with something realistic
int Shooter::GetFineAdjustmentSpeed() {return 20;}
int Shooter::GetCoarseAdjustmentSpeed() {return 200;}
int Shooter::GetFineAdjustmentAngle() {return 3;}
int Shooter::GetCoarseAdjustmentAngle() {return 15;}
void Shooter::TurnToSetAngle(){
	//TODO: Hardware calls to adjust angle to angle variable
}
void Shooter::StopElevatorMotor(){elevationJag->Set(SHOOTER_OFF);}
void Shooter::MoveElevatorMotor(float speed){elevationJag->Set(speed);}
void Shooter::SetPID(double P, double I, double D){
	printf("Setting P:\t%f\nI:\t%f\nD:\t%f\n", P, I, D);
	frontJag->SetPID(P, I, D);
	backJag->SetPID(P, I, D);
}

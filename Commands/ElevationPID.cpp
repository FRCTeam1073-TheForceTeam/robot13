// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "ElevationPID.h"
const float DriveSpeed = .400;
const float P = .02; // Proportional correction factor. .02 = 20 degrees
const float acceptableAngleError = 5.0;
#define TURNING_ANGLE_DEGREES 90
ElevationPID::ElevationPID() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// Called just before this Command runs the first time
void ElevationPID::Initialize() {
	startingAngle = Robot::shooter->GetCurrentAngle();
}
// Called repeatedly when this Command is scheduled to run
void ElevationPID::Execute() {
	currentAngle = startingAngle - Robot::shooter->GetCurrentAngle(); 
	float targetAngle = Robot::shooter->GetElevationAngle();
	float errorAngle = targetAngle - currentAngle;
	float motorOutput = errorAngle * P;
	if (motorOutput > DriveSpeed) 
		motorOutput = DriveSpeed;
	else if (motorOutput < -DriveSpeed)
		motorOutput = -DriveSpeed;
		
	Robot::driveTrain->Move(motorOutput, -motorOutput);
		
}
// Make this return true when this Command no longer needs to run execute()
bool ElevationPID::IsFinished() {
	
	currentAngle = startingAngle - Robot::shooter->GetCurrentAngle();
	float targetAngle = Robot::shooter->GetElevationAngle();
	float errorAngle = targetAngle - currentAngle;
	return (fabs(errorAngle)< acceptableAngleError);
}
// Called once after isFinished returns true
void ElevationPID::End() {
	Robot::shooter->StopElevatorMotor();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ElevationPID::Interrupted() {
	End();
}
